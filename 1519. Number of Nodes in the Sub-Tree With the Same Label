class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};

class Solution {
public:
    
    vector<int> label( Node* root, vector<int>& ans, string& lab ){
        vector<int> curr(26, 0);
        
        if( !root ){
            return curr;
        }
        
        int lb = lab[root->val] - 'a';
        curr[lb]++;
        
        if( root->children.size() == 0 ){
            ans[root->val] = 1;
            return curr;
        }
      
        for( int i = 0 ; i < root->children.size() ; i++ ){
            vector<int> t = label( root->children[i], ans, lab );
            
            for( int j = 0 ; j < 26 ; j++ ){
                curr[j] += t[j];
            }   
        }
        
        ans[root->val] = curr[lb];
        return curr;
    }
    
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        unordered_map< int, vector<int> > mp;
        Node* root = new Node(0);
        
        for( int i = 0 ; i < edges.size() ; i++ ){
            int u = edges[i][0], v = edges[i][1];
            mp[u].push_back(v);
            mp[v].push_back(u);
        }
        
        vector<int> par( n, -1 );
        queue<Node*> q;
        
        q.push(root);
        par[0] = 0 ;
        
        while( !q.empty() ){
            Node* fr = q.front();
            q.pop();
            
            for( auto i : mp[fr->val]){
                if( par[i] < 0 ){
                    par[i] = fr->val;
                    Node* c = new Node(i);
                    
                    fr->children.push_back(c);
                    q.push(c);
                }
            }
        }
        
        mp.clear();
        vector<int> ans(n);
        vector<int> curr = label(root, ans, labels);
        
        return ans;
        
    }
};

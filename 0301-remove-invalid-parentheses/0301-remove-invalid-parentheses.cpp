class Solution {
public:
    
    unordered_map<string, int> val;
    int l, n;

    bool isValid(string& s) {
        stack<char> stk;
        int b = 0;
        
        for( int i = 0 ; i < s.length() ; i++ )
        {
            if( s[i] != ')' ){
                stk.push(s[i]);
                if( s[i] == '(' )
                    b++;
            }
            else{
                b--;
                while( !stk.empty() && stk.top() != '(' ){
                    stk.pop();
                }
                if( stk.empty() ){
                    return false;
                }
                stk.pop();
            }
        }
        
        if( b != 0 ){
            return false;
        }
        return true;
    }
    
    void solve( int i, string& in , string& out, int o, int c ){
        if( c > o ){
            return ;
        }
        if( i >= in.length() ){
            if( (o == c) && (!val.count(out)) && (isValid(out)) ){
                l = ( l < out.length() ) ? out.length() : l;
                val[out]++;
            }
            return;
        }
        //exclude current
        solve( i+1, in, out, o, c );
        //include current
        if( in[i] == '(' ){
            o++;
        }
        else if( in[i] == ')' ){
            c++;
        }
        out.push_back(in[i]);
        solve( i+1, in, out, o, c );
        out.pop_back();
        
    }
    
    vector<string> removeInvalidParentheses(string s) {
        val.clear();
        l = 0, n = s.length();
        string out = "";
     
        solve( 0, s, out, 0, 0 );
        vector<string> ans;
        
        for( auto i : val ){
            if( i.first.length() == l ){
                ans.push_back(i.first);
            }
        }
        
        return ans;
    }
};
/*
"()())()"
"(a)())()"
")("
")k)))())()())))())"
"p(r)"
"n"
")k)))())()())))())"
"((())(()()xr(()()("
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
")k)))())()())))())"
*/